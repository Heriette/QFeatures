% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/QFeatures-class.R, R/QFeatures-constructors.R
\name{QFeatures}
\alias{QFeatures}
\alias{QFeatures-class}
\alias{class:QFeatures}
\alias{addAssay}
\alias{dims,QFeatures-method}
\alias{show,QFeatures-method}
\alias{[,QFeatures,ANY,ANY,ANY-method}
\alias{[,QFeatures,character,ANY,ANY-method}
\alias{rowDataNames}
\alias{selectRowData}
\alias{rowData,QFeatures-method}
\alias{setRowData}
\alias{getRowData}
\alias{names<-,QFeatures,character-method}
\alias{longFormat}
\title{Quantitative MS QFeatures}
\usage{
\S4method{show}{QFeatures}(object)

\S4method{[}{QFeatures,ANY,ANY,ANY}(x, i, j, ..., drop = TRUE)

\S4method{dims}{QFeatures}(x)

\S4method{[}{QFeatures,character,ANY,ANY}(x, i, j, k, ..., drop = TRUE)

\S4method{rowData}{QFeatures}(x, use.names = TRUE, ...)

selectRowData(x, rowvars)

setRowData(object, rowDataCols, replacement)

getRowData(object, i, rowDataCols)

rowDataNames(x)

\S4method{names}{QFeatures,character}(x) <- value

longFormat(object, colDataCols = NULL, rowDataCols = NULL, index = 1L)

QFeatures(..., assayLinks = NULL)

addAssay(x, y, name = "newAssay", assayLinks = AssayLinks(names = name))
}
\arguments{
\item{object}{An instance of class \code{QFeatures}.}

\item{x}{An instance of class \link{QFeatures}.}

\item{i}{\code{character()}, \code{integer()}, \code{logical()} or \code{GRanges()}
object for subsetting by rows.}

\item{j}{\code{character()}, \code{logical()}, or \code{numeric()} vector for
subsetting by \code{colData} rows.}

\item{...}{See \code{MultiAssayExperiment} for details.}

\item{drop}{logical (default \code{TRUE}) whether to drop empty assay
elements in the \code{ExperimentList}.}

\item{k}{\code{character()}, \code{logical()}, or \code{numeric()} vector for
subsetting by assays}

\item{use.names}{A \code{logical(1)} indicating whether the rownames of
each assay should be propagated to the corresponding \code{rowData}.}

\item{rowvars}{A \code{character()} with the names of the \code{rowData}
variables (columns) to retain in any assay. All other
variables will be dropped. In case an element in \code{rowvars}
isn't found in any \code{rowData} variable, a message is printed.}

\item{rowDataCols}{A \code{character()} that selects column(s) in the
\code{rowData}.}

\item{replacement}{A named \code{list()} of same length as \code{i}. The
names of the list are used to select the assays to modify. Each
element of the list should contain a table of class \code{data.frame}
or \code{DFrame}. The names in \code{rowDataCols} are used to select the
columns in the replacement tables and to create the new column
in the \code{rowData}. If instead of a table, the elements of the
list are \code{NULL}, then the \code{rowDataCols} are removed.}

\item{value}{A character() with new name(s) for the assay(s) in \code{x}}

\item{colDataCols}{A \code{character()} that selects column(s) in the
\code{colData}.}

\item{index}{The assay indicator for \code{SummarizedExperiment}
objects. A vector input is supported in the case that the
\code{SummarizedExperiment} object(s) has more than one assay
(default \code{1L})}

\item{assayLinks}{An optional \link{AssayLinks}.}

\item{y}{A single assay or a \emph{named} list of assays.}

\item{name}{A \code{character(1)} naming the single assay (default is
\code{"newAssay"}). Ignored if \code{y} is a list of assays.}
}
\value{
See individual method description for the return value.
}
\description{
Conceptually, a \code{QFeatures} object holds a set of \emph{assays}, each
composed of a \code{matrix} (or \code{array}) containing quantitative data
and row annotations (meta-data).  The number and the names of the
columns (samples) must always be the same across the assays, but
the number and the names of the rows (features) can vary. The
assays are typically defined as \code{SummarizedExperiment} objects. In
addition, a \code{QFeatures} object also uses a single \code{DataFrame} to
annotate the samples (columns) represented in all the matrices.

The \code{QFeatures} class extends the
\link[MultiAssayExperiment:MultiAssayExperiment]{MultiAssayExperiment::MultiAssayExperiment} and inherits all
the functionality of the
\link[MultiAssayExperiment:MultiAssayExperiment]{MultiAssayExperiment::MultiAssayExperiment} class.

A typical use case for such \code{QFeatures} object is to represent
quantitative proteomics (or metabolomics) data, where different
assays represent quantitation data at the PSM (the main assay),
peptide and protein level, and where peptide values are computed
from the PSM data, and the protein-level data is calculated based
on the peptide-level values. The largest assay (the one with the
highest number of features, PSMs in the example above) is
considered the main assay.

The recommended way to create \code{QFeatures} objects is the use the
\code{readQFeatures()} function, that creates an instance from tabular
data. The \code{QFeatures} constructor can be used to create objects
from their bare parts.  It is the user's responsability to make
sure that these match the class validity requirements.
}
\section{Constructors}{

\itemize{
\item \code{QFeatures(..., assayLinks)} allows the manual construction of
objects. It is the user's responsability to make sure these
comply. The arguments in \code{...} are those documented in
\code{\link[MultiAssayExperiment:MultiAssayExperiment]{MultiAssayExperiment::MultiAssayExperiment()}}. For details
about \code{assayLinks}, see \link{AssayLinks}. An example is shown below.
\item The \code{\link[=readQFeatures]{readQFeatures()}} function constructs a \code{QFeatures} object
from text-based spreadsheet or a \code{data.frame} used to generate
an assay. See the function manual page for details and an
example.
}
}

\section{Accessors}{

\itemize{
\item The \code{QFeatures} class extends the
\link[MultiAssayExperiment:MultiAssayExperiment]{MultiAssayExperiment::MultiAssayExperiment} class and inherits
all its accessors and replacement methods.
\item The \code{rowDataNames} accessor returns a list with the \code{rowData}
variable names.
\item The \code{longFormat} accessor takes a \code{QFeatures} object and returns
it in a long format \code{DataFrame}. Each quantitative value is
reported on a separate line. \code{colData} and \code{rowData} data can
also be added. This function is an extension of the \code{longFormat}
function in the \link[MultiAssayExperiment:MultiAssayExperiment]{MultiAssayExperiment::MultiAssayExperiment}.
\item The \code{getRowData} function extracts the \code{rowData} from one or more
assays in a \code{QFeatures} object. The output can either be a list
of \code{DFrame} tables (\code{bindRows = FLASE}) or the tables can be
combined in a single \code{DFrame} table (\code{bindRows = FLASE}). On the
other hand, the \code{setRowData} function modifies columns in the
\code{rowData} from one or more assays in \code{QFeatures} object. This
function can also be used to remove column in the rowData
(see the vignette for some examples).
}
}

\section{Adding assays}{

\itemize{
\item The \code{\link[=aggregateFeatures]{aggregateFeatures()}} function creates a new assay by
aggregating features of an existing assay.
\item \code{addAssay(x, y, name, assayLinks)}: Adds a new assay (or
list of assays) \code{y} to the \code{QFeatures} instance \code{x}. \code{name}
is a \code{character(1)} naming the single assay (default is
\code{"newAssay"}), and is ignored if \code{y} is a list of
assays. \code{assayLinks} is an optional \link{AssayLinks}.
}
}

\section{Subsetting}{

\itemize{
\item QFeatures object can be subset using the \code{x[i, j, k, drop = TRUE]} paradigm. See the argument descriptions for details.
\item The \code{\link[=subsetByFeature]{subsetByFeature()}} function can be used to subset a
\code{QFeatures} object using one or multiple feature names that will
be matched across different assays, taking the aggregation
relation between assays.
\item The \code{selectRowData(x, rowvars)} function can be used to
select a limited number of \code{rowData} columns of interest named
in \code{rowvars} in the \code{x} instance of class \code{QFeatures}.
}
}

\examples{
## ------------------------
## An empty QFeatures object
## ------------------------

QFeatures()

## -----------------------------------
## Creating a QFeatures object manually
## -----------------------------------

## two assays (matrices) with matching column names
m1 <- matrix(1:40, ncol = 4)
m2 <- matrix(1:16, ncol = 4)
sample_names <- paste0("S", 1:4)
colnames(m1) <- colnames(m2) <- sample_names
rownames(m1) <- letters[1:10]
rownames(m2) <- letters[1:4]

## two corresponding feature metadata with appropriate row names
df1 <- DataFrame(Fa = 1:10, Fb = letters[1:10],
                 row.names = rownames(m1))
df2 <- DataFrame(row.names = rownames(m2))

(se1 <- SummarizedExperiment(m1, df1))
(se2 <- SummarizedExperiment(m2, df2))

## Sample annotation (colData)
cd <- DataFrame(Var1 = rnorm(4),
                Var2 = LETTERS[1:4],
                row.names = sample_names)

el <- list(assay1 = se1, assay2 = se2)
fts1 <- QFeatures(el, colData = cd)
fts1
fts1[[1]]
fts1[["assay1"]]

## Rename assay
names(fts1) <- c("se1", "se2")

## Add an assay
fts1 <- addAssay(fts1, se1[1:2, ], name = "se3")

## Get the assays feature metadata
rowData(fts1) 

## Keep only the Fa variable
selectRowData(fts1, rowvars = "Fa")

## -----------------------------------
## See ?readQFeatures to create a
## QFeatures object from a data.frame
## or spreadsheet.
## -----------------------------------
}
\seealso{
\itemize{
\item The \code{\link[=readQFeatures]{readQFeatures()}} constructor and the \code{\link[=aggregateFeatures]{aggregateFeatures()}}
function. The \emph{QFeatures} vignette provides an extended example.
\item The \link{QFeatures-filtering} manual page demonstrates how to filter
features based on their rowData.
\item The \link{missing-data} manual page to manage missing values in
\code{QFeatures} objects.
\item The \link{QFeatures-processing} and \code{\link[=aggregateFeatures]{aggregateFeatures()}} manual pages
and \emph{Processing} vignette describe common quantitative data
processing methods using in quantitative proteomics.
}
}
\author{
Laurent Gatto
}
