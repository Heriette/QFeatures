% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Features-filter.R
\docType{class}
\name{filterFeatures}
\alias{filterFeatures}
\alias{filterFeatures,Features,formula-method}
\alias{filterFeatures,Features,AnnotationFilter-method}
\alias{CharacterVariableFilter}
\alias{NumericVariableFilter}
\alias{VariableFilter}
\alias{CharacterVariableFilter-class}
\alias{NumericVariableFilter-class}
\title{Filter featuress based on their rowData}
\usage{
VariableFilter(field, value, condition = "==")

filterFeatures(object, filter, ...)

\S4method{filterFeatures}{Features,AnnotationFilter}(object, filter, ...)

\S4method{filterFeatures}{Features,formula}(object, filter, ...)
}
\arguments{
\item{field}{`character(1)` refering to the name of the variable
to apply the filter on.}

\item{value}{‘character()’ or ‘integer()’ value for the
`CharacterVariableFilter` and `NumericVariableFilter` filters
respectively.}

\item{condition}{‘character(1)’ defining the condition to be used in
the filter. For ‘NumericVariableFilter’, one of ‘"=="’,
‘"!="’, ‘">"’, ‘"<"’, ‘">="’ or ‘"<="’. For
‘CharacterVariableFilter’, one of ‘"=="’, ‘"!="’,
‘"startsWith"’, ‘"endsWith"’ or ‘"contains"’. Default
condition is ‘"=="’.}

\item{object}{An instance of class [Features].}

\item{filter}{Either an instance of class [AnnotationFilter] or a
formula.}

\item{...}{Additional parameters. Currently ignored.}
}
\description{
The \code{filterFeatures} methods enables users to filter features
based on a variable in their \code{rowData}. The features matching the
filter will be returned as a new object of class \code{Features}. The
filters can be provided as instances of class \code{AnnotationFilter}
(see below) or as formulas.
}
\section{Variable filters}{


The variable filters are filters as defined in the
\link{AnnotationFilter} package. In addition to the pre-defined filter,
users can arbitrarily set a field on which to operate. These
arbitrary filters operate either on a character variables (as
\code{CharacterVariableFilter} objects) or numerics (as
\code{NumericVariableFilters} objects), which can be created with the
\code{VariableFilter} constructor.
}

\examples{

## ----------------------------------------
## Creating character and numberic
## variable filters
## ----------------------------------------

VariableFilter(field = "my_var",
               value = "value_to_keep",
               condition = "==")

VariableFilter(field = "my_num_var",
               value = 0.05,
               condition = "<=")

example(Features)

## ----------------------------------------
## Filter all features that are associated
## to the Mitochondrion in the markers
## feature variable
## ----------------------------------------

## using the forumla interface, exact mathc
filterFeatures(fts2, ~ markers == "Mitochondrion")

## using the forumula intefrace, martial match
filterFeatures(fts2, ~startsWith(markers, "Mito"))

## using a user-defined character filter
filterFeatures(fts2, VariableFilter("markers", "Mitochondrion"))

## ----------------------------------------
## Filter all features that aren't marked
## as unknown (sub-cellular location) in the
## feature variable
## ----------------------------------------

## using a user-defined character filter
filterFeatures(fts2, VariableFilter("markers", "unknown", condition = "!="))

## using the forumula interface
filterFeatures(fts2, ~ markers != "unknown")

## ----------------------------------------
## Filter features that have a q-value lower
## or equal to 0.001
## ----------------------------------------

## using a user-defined numeric filter
filterFeatures(fts2, VariableFilter("qValue", 0.001, "<="))

## using the formula interface
filterFeatures(fts2, ~ qValue <= 0.001)

## ----------------------------------------
## Negative control - filtering for an
## non-existing markers value or a missing
## feature variable, returning empty results
## ----------------------------------------

filterFeatures(fts2, VariableFilter("markers", "not"))

filterFeatures(fts2, ~ markers == "not")

filterFeatures(fts2, VariableFilter("foo", "bar"))

filterFeatures(fts2, ~ foo == "bar")
}
\author{
Laurent Gatto
}
