% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readQFeatures.R
\name{readQFeatures}
\alias{readQFeatures}
\alias{readSummarizedExperiment}
\alias{readQFeatures,data.frame,data.frame}
\alias{readQFeatures,data.frame,vector}
\alias{readQFeatures,missing,vector}
\title{QFeatures from tabular data}
\usage{
readSummarizedExperiment(
  assayData,
  quantCols = NULL,
  fnames = NULL,
  ecol = NULL,
  ...
)

readQFeatures(
  assayData,
  colData = NULL,
  quantCols = NULL,
  runCol = NULL,
  name = "quants",
  removeEmptyCols = FALSE,
  verbose = TRUE,
  ecol = NULL,
  ...
)
}
\arguments{
\item{assayData}{A \code{data.frame}, or any object that can be coerced
into a \code{data.frame}, holding the quantitative assay. For
\code{readSummarizedExperiment()}, this can also be a
\code{character(1)} pointing to a filename. This \code{data.frame} is
typically generated by an identification and quantification
software, such as Sage, Proteome Discoverer, MaxQuant, ...}

\item{quantCols}{A \code{numeric()}, \code{logical()} or \code{character()}
defining the columns of the \code{assayData} that contain the
quantitative data. This information can also be defined in
\code{colData} (see details).}

\item{fnames}{For the single- and multi-set cases, an optional
\code{character(1)} or \code{numeric(1)} indicating the column to be
used as feature names.  Note that rownames must be unique
within \code{QFeatures} sets.}

\item{ecol}{Same as \code{quantCols}. Available for backwards
compatibility. Default is \code{NULL}. If both \code{ecol} and \code{colData}
are set, an error is thrown.}

\item{...}{Further arguments that can be passed on to \code{\link[=read.csv]{read.csv()}}
except \code{stringsAsFactors}, which is always \code{FALSE}. Only
applicable to \code{readSummarizedExperiment()}.}

\item{colData}{A \code{data.frame} (or any object that can be coerced
to a \code{data.frame}) containing sample/column annotations,
including \code{quantCols} and \code{runCol} (see details).}

\item{runCol}{For the multi-set case, a \code{numeric(1)} or
\code{character(1)} pointing to the column of \code{assayData} (and
\code{colData}, is set) that contains the runs/batches. Make sure
that the column name in both tables are identical and
syntactically valid (if you supply a \code{character}) or have the
same index (if you supply a \code{numeric}). Note that characters
are converted to syntactically valid names using \code{make.names}}

\item{name}{For the single-set case, an optional \code{character(1)} to
name the set in the \code{QFeatures} object. Default is \code{quants}.}

\item{removeEmptyCols}{A \code{logical(1)}. If \code{TRUE}, quantitative
columns that contain only missing values are removed.}

\item{verbose}{A \code{logical(1)} indicating whether the progress of
the data reading and formatting should be printed to the
console. Default is \code{TRUE}.}
}
\value{
An instance of class \code{QFeatures} or
\code{\link[SummarizedExperiment:RangedSummarizedExperiment-class]{SummarizedExperiment::SummarizedExperiment()}}. For the
former, the quantitative sets of each run are stored in
\code{\link[SummarizedExperiment:RangedSummarizedExperiment-class]{SummarizedExperiment::SummarizedExperiment()}} object.
}
\description{
These functions convert tabular data into dedicated data
objets. The \code{\link[=readSummarizedExperiment]{readSummarizedExperiment()}} function takes a
\code{data.frame} and converts it into a \code{\link[=SummarizedExperiment]{SummarizedExperiment()}}
object.  The \code{\link[=readQFeatures]{readQFeatures()}} function takes a \code{data.frame} and
converts it into a \code{QFeatures} object (see \code{\link[=QFeatures]{QFeatures()}} for
details). Two use-cases exist here:
\itemize{
\item The single-set case will generate a \code{QFeatures} object with a
single \code{SummarizedExperiment} set containing all features of the
input table. This single-set case should be used when reading
data at the peptide or at the protein level. These data are
contained in a table where the quantitative values for each
sample are contained in a separate column.
\item The multi-set case will generate a \code{QFeatures} object containing
multiple \code{SummarizedExperiment} sets, resulting from splitting
the input table. This multi-set case should be used when the
input table contains data from multiple runs/batches, as it is
the case when reading data at the PSM or the precursor level.
In these cases, the data table to read contains one (LFQ) or
more (labelled) columns which contain quanitative information
for multiple MS acquisition runs.
}
}
\details{
The single- and multi-set cases are defined by the \code{quantCols} and
\code{runCol} parameters, whether passed by the \code{colData} \code{data.frame}
and/or the \code{quantCols} and \code{runCol} arguments.
}
\section{Single-set case}{


In both single- and multi-set cases, the quantitative data
variables must be defined by the \code{quantCols}. These cases can be
represented schematically as shown
below.

\if{html}{\out{<div class="sourceCode">}}\preformatted{|------+----------------+-----------|
| cols | quantCols 1..N | more cols |
| .    | ...            | ...       |
| .    | ...            | ...       |
| .    | ...            | ...       |
|------+----------------+-----------|
}\if{html}{\out{</div>}}

The single-set case is defined by the absence of any \code{runCol}
input (see next section).
}

\section{Multi-set case}{


A run/batch variable is required to import multi-set data. It can
either be defined as a \code{runCol} argument only. These cases can be
represented schematically as shown below.

\if{html}{\out{<div class="sourceCode">}}\preformatted{|--------+------+----------------+-----------|
| runCol | cols | quantCols 1..N | more cols |
|   1    | .    | ...            | ...       |
|   1    | .    | ...            | ...       |
|--------+------+----------------+-----------|
|   2    | .    | ...            | ...       |
|--------+------+----------------+-----------|
|   .    | .    | ...            | ...       |
|--------+------+----------------+-----------|
}\if{html}{\out{</div>}}

\strong{Why splitting the table into multiple sets?} In the table
depicted above, the quantCols provide quantitative values for
multiple sample (one sample in each run/batch provided by
\code{runCol}). This violates the \code{SummarizedExperiment} paradigm where
each column should contain an individual sample and would make
downstream data manipulation and data analyses cumbersome. A
solution could be to reshape the table into a wide format to
ensure that every sample is contained in a separate column.
However, this would assume that rows of the table are shared
across runs. When working with PSM data, every PSM is
uniquely characterised by the run it is found. Hence, there are no
shared feature identifiers across runs that would enable a sound
widening of the table. Splitting the table into sets is the only
solution for having every sample in a separate column while
preserving the PSM identity.
}

\section{Adding sample annotations with \code{colData}}{


We strongly recommend providing sample annotations when creating
a \code{QFeatures} object. The \code{colData} is a table where each row
corresponds to a sample and each column provides information about
the sample. There is no restriction on the number of columns and
to the type of data they should contain. However, we impose one or
two columns (depending on the use case) that allow to link the
annotations of each sample to its quantitative data:

\emph{Single-set case:} the \code{colData} must contain a column named
\code{quantCols} that provides the names of the columns in \code{assayData}
that contain the quantitative values for each sample (see
single-set cases in the examples).

\emph{Multi-set case:} the \code{colData} must contain a column named
\code{quantCols} that provides the names of the columns in \code{assayData}
that contain the quantitative values for each sample, and a column
name \code{runCol} that provides the name of the MS run/batch in which
each sample has been acquired. The entries in
\code{colData[["runCol"]]} should match the entries provided by
\code{assayData[[runCol]]}.

\emph{Note1}: when the \code{quantCols} argument is not provided to
\code{readQFeatures()}, the function will automatically determine the
\code{quantCols} from \code{colData[["quantCols"]]}. Therefore, \code{quantCols}
and \code{colData} cannot be both missing.

\emph{Note2}: samples that are present in \code{assayData} but absent
\code{colData} will lead to a warning, and the missing entries will be
automatically added to the \code{colData} and filled with \code{NA}s.

\emph{Note3}: when using the \code{quantCols} and \code{runCol} arguments only
(without \code{colData}), the \code{colData} slot contains zero
columns/variables.
}

\examples{

######################################
## Single-set case.

## Load a data.frame with PSM-level data
data(hlpsms)
hlpsms[1:10, c(1, 2, 10:11, 14, 17)]

## Create a QFeatures object with a single psms set
qf1 <- readQFeatures(hlpsms, quantCols = 1:10, name = "psms")
qf1
colData(qf1)

######################################
## Single-set case with colData.

(coldat <- data.frame(var = rnorm(10),
                      quantCols = names(hlpsms)[1:10]))
qf2 <- readQFeatures(hlpsms, colData = coldat)
qf2
colData(qf2)

######################################
## Multi-set case.

## Let's simulate 3 different files/batches for that same input
## data.frame, and define a colData data.frame.

hlpsms$file <- paste0("File", sample(1:3, nrow(hlpsms), replace = TRUE))
hlpsms[1:10, c(1, 2, 10:11, 14, 17, 29)]

qf3 <- readQFeatures(hlpsms, quantCols = 1:10, runCol = "file")
qf3
colData(qf3)


######################################
## Multi-set case with colData.

(coldat <- data.frame(runCol = rep(paste0("File", 1:3), each = 10),
                      var = rnorm(10),
                      quantCols = names(hlpsms)[1:10]))
qf4 <- readQFeatures(hlpsms, colData = coldat, runCol = "file")
qf4
colData(qf4)
}
\seealso{
\itemize{
\item The \code{QFeatures} (see \code{\link[=QFeatures]{QFeatures()}}) class to read about how to
manipulate the resulting \code{QFeatures} object.
\item The \code{\link[=readQFeaturesFromDIANN]{readQFeaturesFromDIANN()}} function to import DIA-NN
quantitative data.
}
}
\author{
Laurent Gatto, Christophe Vanderaa
}
